// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cxmate.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	cxmate.proto

It has these top-level messages:
	NetworkElement
	Parameter
	Node
	Edge
	NodeAttribute
	EdgeAttribute
	NetworkAttribute
	CartesianCoordinate
	CyGroup
	CyView
	CyVisualProperty
	CyHiddenAttribute
	CyNetworkRelation
	CySubNetwork
	CyTableColumn
	NdexStatus
	Citation
	CitationAttribute
	NodeCitations
	EdgeCitations
	Support
	SupportAttribute
	NodeSupportance
	EdgeSupportance
	FunctionTerm
	ReifiedEdge
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// NetworkElement is a wrapper for all of the cxMate supported element types.
type NetworkElement struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// Types that are valid to be assigned to Element:
	//	*NetworkElement_Parameter
	//	*NetworkElement_Json
	//	*NetworkElement_Node
	//	*NetworkElement_Edge
	//	*NetworkElement_NodeAttribute
	//	*NetworkElement_EdgeAttribute
	//	*NetworkElement_NetworkAttribute
	//	*NetworkElement_CartesianCoordinate
	//	*NetworkElement_CyGroup
	//	*NetworkElement_CyView
	//	*NetworkElement_CyVisualProperty
	//	*NetworkElement_CyHiddenAttribute
	//	*NetworkElement_CyNetworkRelation
	//	*NetworkElement_CySubNetwork
	//	*NetworkElement_CyTableColumn
	//	*NetworkElement_NdexStatus
	//	*NetworkElement_Citation
	//	*NetworkElement_NodeCitations
	//	*NetworkElement_EdgeCitations
	//	*NetworkElement_Support
	//	*NetworkElement_NodeSupportance
	//	*NetworkElement_EdgeSupportance
	//	*NetworkElement_FunctionTerm
	//	*NetworkElement_ReifiedEdge
	Element isNetworkElement_Element `protobuf_oneof:"element"`
}

func (m *NetworkElement) Reset()                    { *m = NetworkElement{} }
func (m *NetworkElement) String() string            { return proto1.CompactTextString(m) }
func (*NetworkElement) ProtoMessage()               {}
func (*NetworkElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isNetworkElement_Element interface {
	isNetworkElement_Element()
}

type NetworkElement_Parameter struct {
	Parameter *Parameter `protobuf:"bytes,2,opt,name=parameter,oneof"`
}
type NetworkElement_Json struct {
	Json string `protobuf:"bytes,3,opt,name=json,oneof"`
}
type NetworkElement_Node struct {
	Node *Node `protobuf:"bytes,4,opt,name=node,oneof"`
}
type NetworkElement_Edge struct {
	Edge *Edge `protobuf:"bytes,5,opt,name=edge,oneof"`
}
type NetworkElement_NodeAttribute struct {
	NodeAttribute *NodeAttribute `protobuf:"bytes,6,opt,name=nodeAttribute,oneof"`
}
type NetworkElement_EdgeAttribute struct {
	EdgeAttribute *EdgeAttribute `protobuf:"bytes,7,opt,name=edgeAttribute,oneof"`
}
type NetworkElement_NetworkAttribute struct {
	NetworkAttribute *NetworkAttribute `protobuf:"bytes,8,opt,name=networkAttribute,oneof"`
}
type NetworkElement_CartesianCoordinate struct {
	CartesianCoordinate *CartesianCoordinate `protobuf:"bytes,9,opt,name=CartesianCoordinate,oneof"`
}
type NetworkElement_CyGroup struct {
	CyGroup *CyGroup `protobuf:"bytes,10,opt,name=cyGroup,oneof"`
}
type NetworkElement_CyView struct {
	CyView *CyView `protobuf:"bytes,11,opt,name=cyView,oneof"`
}
type NetworkElement_CyVisualProperty struct {
	CyVisualProperty *CyVisualProperty `protobuf:"bytes,12,opt,name=cyVisualProperty,oneof"`
}
type NetworkElement_CyHiddenAttribute struct {
	CyHiddenAttribute *CyHiddenAttribute `protobuf:"bytes,13,opt,name=cyHiddenAttribute,oneof"`
}
type NetworkElement_CyNetworkRelation struct {
	CyNetworkRelation *CyNetworkRelation `protobuf:"bytes,14,opt,name=cyNetworkRelation,oneof"`
}
type NetworkElement_CySubNetwork struct {
	CySubNetwork *CySubNetwork `protobuf:"bytes,15,opt,name=cySubNetwork,oneof"`
}
type NetworkElement_CyTableColumn struct {
	CyTableColumn *CyTableColumn `protobuf:"bytes,16,opt,name=cyTableColumn,oneof"`
}
type NetworkElement_NdexStatus struct {
	NdexStatus *NdexStatus `protobuf:"bytes,17,opt,name=ndexStatus,oneof"`
}
type NetworkElement_Citation struct {
	Citation *Citation `protobuf:"bytes,18,opt,name=citation,oneof"`
}
type NetworkElement_NodeCitations struct {
	NodeCitations *NodeCitations `protobuf:"bytes,19,opt,name=nodeCitations,oneof"`
}
type NetworkElement_EdgeCitations struct {
	EdgeCitations *EdgeCitations `protobuf:"bytes,20,opt,name=edgeCitations,oneof"`
}
type NetworkElement_Support struct {
	Support *Support `protobuf:"bytes,21,opt,name=support,oneof"`
}
type NetworkElement_NodeSupportance struct {
	NodeSupportance *NodeSupportance `protobuf:"bytes,22,opt,name=nodeSupportance,oneof"`
}
type NetworkElement_EdgeSupportance struct {
	EdgeSupportance *EdgeSupportance `protobuf:"bytes,23,opt,name=edgeSupportance,oneof"`
}
type NetworkElement_FunctionTerm struct {
	FunctionTerm *FunctionTerm `protobuf:"bytes,24,opt,name=functionTerm,oneof"`
}
type NetworkElement_ReifiedEdge struct {
	ReifiedEdge *ReifiedEdge `protobuf:"bytes,25,opt,name=reifiedEdge,oneof"`
}

func (*NetworkElement_Parameter) isNetworkElement_Element()           {}
func (*NetworkElement_Json) isNetworkElement_Element()                {}
func (*NetworkElement_Node) isNetworkElement_Element()                {}
func (*NetworkElement_Edge) isNetworkElement_Element()                {}
func (*NetworkElement_NodeAttribute) isNetworkElement_Element()       {}
func (*NetworkElement_EdgeAttribute) isNetworkElement_Element()       {}
func (*NetworkElement_NetworkAttribute) isNetworkElement_Element()    {}
func (*NetworkElement_CartesianCoordinate) isNetworkElement_Element() {}
func (*NetworkElement_CyGroup) isNetworkElement_Element()             {}
func (*NetworkElement_CyView) isNetworkElement_Element()              {}
func (*NetworkElement_CyVisualProperty) isNetworkElement_Element()    {}
func (*NetworkElement_CyHiddenAttribute) isNetworkElement_Element()   {}
func (*NetworkElement_CyNetworkRelation) isNetworkElement_Element()   {}
func (*NetworkElement_CySubNetwork) isNetworkElement_Element()        {}
func (*NetworkElement_CyTableColumn) isNetworkElement_Element()       {}
func (*NetworkElement_NdexStatus) isNetworkElement_Element()          {}
func (*NetworkElement_Citation) isNetworkElement_Element()            {}
func (*NetworkElement_NodeCitations) isNetworkElement_Element()       {}
func (*NetworkElement_EdgeCitations) isNetworkElement_Element()       {}
func (*NetworkElement_Support) isNetworkElement_Element()             {}
func (*NetworkElement_NodeSupportance) isNetworkElement_Element()     {}
func (*NetworkElement_EdgeSupportance) isNetworkElement_Element()     {}
func (*NetworkElement_FunctionTerm) isNetworkElement_Element()        {}
func (*NetworkElement_ReifiedEdge) isNetworkElement_Element()         {}

func (m *NetworkElement) GetElement() isNetworkElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *NetworkElement) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *NetworkElement) GetParameter() *Parameter {
	if x, ok := m.GetElement().(*NetworkElement_Parameter); ok {
		return x.Parameter
	}
	return nil
}

func (m *NetworkElement) GetJson() string {
	if x, ok := m.GetElement().(*NetworkElement_Json); ok {
		return x.Json
	}
	return ""
}

func (m *NetworkElement) GetNode() *Node {
	if x, ok := m.GetElement().(*NetworkElement_Node); ok {
		return x.Node
	}
	return nil
}

func (m *NetworkElement) GetEdge() *Edge {
	if x, ok := m.GetElement().(*NetworkElement_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *NetworkElement) GetNodeAttribute() *NodeAttribute {
	if x, ok := m.GetElement().(*NetworkElement_NodeAttribute); ok {
		return x.NodeAttribute
	}
	return nil
}

func (m *NetworkElement) GetEdgeAttribute() *EdgeAttribute {
	if x, ok := m.GetElement().(*NetworkElement_EdgeAttribute); ok {
		return x.EdgeAttribute
	}
	return nil
}

func (m *NetworkElement) GetNetworkAttribute() *NetworkAttribute {
	if x, ok := m.GetElement().(*NetworkElement_NetworkAttribute); ok {
		return x.NetworkAttribute
	}
	return nil
}

func (m *NetworkElement) GetCartesianCoordinate() *CartesianCoordinate {
	if x, ok := m.GetElement().(*NetworkElement_CartesianCoordinate); ok {
		return x.CartesianCoordinate
	}
	return nil
}

func (m *NetworkElement) GetCyGroup() *CyGroup {
	if x, ok := m.GetElement().(*NetworkElement_CyGroup); ok {
		return x.CyGroup
	}
	return nil
}

func (m *NetworkElement) GetCyView() *CyView {
	if x, ok := m.GetElement().(*NetworkElement_CyView); ok {
		return x.CyView
	}
	return nil
}

func (m *NetworkElement) GetCyVisualProperty() *CyVisualProperty {
	if x, ok := m.GetElement().(*NetworkElement_CyVisualProperty); ok {
		return x.CyVisualProperty
	}
	return nil
}

func (m *NetworkElement) GetCyHiddenAttribute() *CyHiddenAttribute {
	if x, ok := m.GetElement().(*NetworkElement_CyHiddenAttribute); ok {
		return x.CyHiddenAttribute
	}
	return nil
}

func (m *NetworkElement) GetCyNetworkRelation() *CyNetworkRelation {
	if x, ok := m.GetElement().(*NetworkElement_CyNetworkRelation); ok {
		return x.CyNetworkRelation
	}
	return nil
}

func (m *NetworkElement) GetCySubNetwork() *CySubNetwork {
	if x, ok := m.GetElement().(*NetworkElement_CySubNetwork); ok {
		return x.CySubNetwork
	}
	return nil
}

func (m *NetworkElement) GetCyTableColumn() *CyTableColumn {
	if x, ok := m.GetElement().(*NetworkElement_CyTableColumn); ok {
		return x.CyTableColumn
	}
	return nil
}

func (m *NetworkElement) GetNdexStatus() *NdexStatus {
	if x, ok := m.GetElement().(*NetworkElement_NdexStatus); ok {
		return x.NdexStatus
	}
	return nil
}

func (m *NetworkElement) GetCitation() *Citation {
	if x, ok := m.GetElement().(*NetworkElement_Citation); ok {
		return x.Citation
	}
	return nil
}

func (m *NetworkElement) GetNodeCitations() *NodeCitations {
	if x, ok := m.GetElement().(*NetworkElement_NodeCitations); ok {
		return x.NodeCitations
	}
	return nil
}

func (m *NetworkElement) GetEdgeCitations() *EdgeCitations {
	if x, ok := m.GetElement().(*NetworkElement_EdgeCitations); ok {
		return x.EdgeCitations
	}
	return nil
}

func (m *NetworkElement) GetSupport() *Support {
	if x, ok := m.GetElement().(*NetworkElement_Support); ok {
		return x.Support
	}
	return nil
}

func (m *NetworkElement) GetNodeSupportance() *NodeSupportance {
	if x, ok := m.GetElement().(*NetworkElement_NodeSupportance); ok {
		return x.NodeSupportance
	}
	return nil
}

func (m *NetworkElement) GetEdgeSupportance() *EdgeSupportance {
	if x, ok := m.GetElement().(*NetworkElement_EdgeSupportance); ok {
		return x.EdgeSupportance
	}
	return nil
}

func (m *NetworkElement) GetFunctionTerm() *FunctionTerm {
	if x, ok := m.GetElement().(*NetworkElement_FunctionTerm); ok {
		return x.FunctionTerm
	}
	return nil
}

func (m *NetworkElement) GetReifiedEdge() *ReifiedEdge {
	if x, ok := m.GetElement().(*NetworkElement_ReifiedEdge); ok {
		return x.ReifiedEdge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkElement) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _NetworkElement_OneofMarshaler, _NetworkElement_OneofUnmarshaler, _NetworkElement_OneofSizer, []interface{}{
		(*NetworkElement_Parameter)(nil),
		(*NetworkElement_Json)(nil),
		(*NetworkElement_Node)(nil),
		(*NetworkElement_Edge)(nil),
		(*NetworkElement_NodeAttribute)(nil),
		(*NetworkElement_EdgeAttribute)(nil),
		(*NetworkElement_NetworkAttribute)(nil),
		(*NetworkElement_CartesianCoordinate)(nil),
		(*NetworkElement_CyGroup)(nil),
		(*NetworkElement_CyView)(nil),
		(*NetworkElement_CyVisualProperty)(nil),
		(*NetworkElement_CyHiddenAttribute)(nil),
		(*NetworkElement_CyNetworkRelation)(nil),
		(*NetworkElement_CySubNetwork)(nil),
		(*NetworkElement_CyTableColumn)(nil),
		(*NetworkElement_NdexStatus)(nil),
		(*NetworkElement_Citation)(nil),
		(*NetworkElement_NodeCitations)(nil),
		(*NetworkElement_EdgeCitations)(nil),
		(*NetworkElement_Support)(nil),
		(*NetworkElement_NodeSupportance)(nil),
		(*NetworkElement_EdgeSupportance)(nil),
		(*NetworkElement_FunctionTerm)(nil),
		(*NetworkElement_ReifiedEdge)(nil),
	}
}

func _NetworkElement_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*NetworkElement)
	// element
	switch x := m.Element.(type) {
	case *NetworkElement_Parameter:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Parameter); err != nil {
			return err
		}
	case *NetworkElement_Json:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		b.EncodeStringBytes(x.Json)
	case *NetworkElement_Node:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *NetworkElement_Edge:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case *NetworkElement_NodeAttribute:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NodeAttribute); err != nil {
			return err
		}
	case *NetworkElement_EdgeAttribute:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EdgeAttribute); err != nil {
			return err
		}
	case *NetworkElement_NetworkAttribute:
		b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NetworkAttribute); err != nil {
			return err
		}
	case *NetworkElement_CartesianCoordinate:
		b.EncodeVarint(9<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CartesianCoordinate); err != nil {
			return err
		}
	case *NetworkElement_CyGroup:
		b.EncodeVarint(10<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyGroup); err != nil {
			return err
		}
	case *NetworkElement_CyView:
		b.EncodeVarint(11<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyView); err != nil {
			return err
		}
	case *NetworkElement_CyVisualProperty:
		b.EncodeVarint(12<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyVisualProperty); err != nil {
			return err
		}
	case *NetworkElement_CyHiddenAttribute:
		b.EncodeVarint(13<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyHiddenAttribute); err != nil {
			return err
		}
	case *NetworkElement_CyNetworkRelation:
		b.EncodeVarint(14<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyNetworkRelation); err != nil {
			return err
		}
	case *NetworkElement_CySubNetwork:
		b.EncodeVarint(15<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CySubNetwork); err != nil {
			return err
		}
	case *NetworkElement_CyTableColumn:
		b.EncodeVarint(16<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CyTableColumn); err != nil {
			return err
		}
	case *NetworkElement_NdexStatus:
		b.EncodeVarint(17<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NdexStatus); err != nil {
			return err
		}
	case *NetworkElement_Citation:
		b.EncodeVarint(18<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Citation); err != nil {
			return err
		}
	case *NetworkElement_NodeCitations:
		b.EncodeVarint(19<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NodeCitations); err != nil {
			return err
		}
	case *NetworkElement_EdgeCitations:
		b.EncodeVarint(20<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EdgeCitations); err != nil {
			return err
		}
	case *NetworkElement_Support:
		b.EncodeVarint(21<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Support); err != nil {
			return err
		}
	case *NetworkElement_NodeSupportance:
		b.EncodeVarint(22<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.NodeSupportance); err != nil {
			return err
		}
	case *NetworkElement_EdgeSupportance:
		b.EncodeVarint(23<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EdgeSupportance); err != nil {
			return err
		}
	case *NetworkElement_FunctionTerm:
		b.EncodeVarint(24<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.FunctionTerm); err != nil {
			return err
		}
	case *NetworkElement_ReifiedEdge:
		b.EncodeVarint(25<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.ReifiedEdge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkElement.Element has unexpected type %T", x)
	}
	return nil
}

func _NetworkElement_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*NetworkElement)
	switch tag {
	case 2: // element.parameter
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Parameter)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Parameter{msg}
		return true, err
	case 3: // element.json
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Element = &NetworkElement_Json{x}
		return true, err
	case 4: // element.node
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Node{msg}
		return true, err
	case 5: // element.edge
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Edge{msg}
		return true, err
	case 6: // element.nodeAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NodeAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NodeAttribute{msg}
		return true, err
	case 7: // element.edgeAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EdgeAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_EdgeAttribute{msg}
		return true, err
	case 8: // element.networkAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NetworkAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NetworkAttribute{msg}
		return true, err
	case 9: // element.CartesianCoordinate
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CartesianCoordinate)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CartesianCoordinate{msg}
		return true, err
	case 10: // element.cyGroup
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyGroup)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyGroup{msg}
		return true, err
	case 11: // element.cyView
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyView)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyView{msg}
		return true, err
	case 12: // element.cyVisualProperty
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyVisualProperty)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyVisualProperty{msg}
		return true, err
	case 13: // element.cyHiddenAttribute
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyHiddenAttribute)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyHiddenAttribute{msg}
		return true, err
	case 14: // element.cyNetworkRelation
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyNetworkRelation)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyNetworkRelation{msg}
		return true, err
	case 15: // element.cySubNetwork
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CySubNetwork)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CySubNetwork{msg}
		return true, err
	case 16: // element.cyTableColumn
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CyTableColumn)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_CyTableColumn{msg}
		return true, err
	case 17: // element.ndexStatus
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NdexStatus)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NdexStatus{msg}
		return true, err
	case 18: // element.citation
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Citation)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Citation{msg}
		return true, err
	case 19: // element.nodeCitations
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NodeCitations)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NodeCitations{msg}
		return true, err
	case 20: // element.edgeCitations
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EdgeCitations)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_EdgeCitations{msg}
		return true, err
	case 21: // element.support
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Support)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_Support{msg}
		return true, err
	case 22: // element.nodeSupportance
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(NodeSupportance)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_NodeSupportance{msg}
		return true, err
	case 23: // element.edgeSupportance
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(EdgeSupportance)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_EdgeSupportance{msg}
		return true, err
	case 24: // element.functionTerm
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(FunctionTerm)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_FunctionTerm{msg}
		return true, err
	case 25: // element.reifiedEdge
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ReifiedEdge)
		err := b.DecodeMessage(msg)
		m.Element = &NetworkElement_ReifiedEdge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkElement_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*NetworkElement)
	// element
	switch x := m.Element.(type) {
	case *NetworkElement_Parameter:
		s := proto1.Size(x.Parameter)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Json:
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.Json)))
		n += len(x.Json)
	case *NetworkElement_Node:
		s := proto1.Size(x.Node)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Edge:
		s := proto1.Size(x.Edge)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NodeAttribute:
		s := proto1.Size(x.NodeAttribute)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_EdgeAttribute:
		s := proto1.Size(x.EdgeAttribute)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NetworkAttribute:
		s := proto1.Size(x.NetworkAttribute)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CartesianCoordinate:
		s := proto1.Size(x.CartesianCoordinate)
		n += proto1.SizeVarint(9<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyGroup:
		s := proto1.Size(x.CyGroup)
		n += proto1.SizeVarint(10<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyView:
		s := proto1.Size(x.CyView)
		n += proto1.SizeVarint(11<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyVisualProperty:
		s := proto1.Size(x.CyVisualProperty)
		n += proto1.SizeVarint(12<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyHiddenAttribute:
		s := proto1.Size(x.CyHiddenAttribute)
		n += proto1.SizeVarint(13<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyNetworkRelation:
		s := proto1.Size(x.CyNetworkRelation)
		n += proto1.SizeVarint(14<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CySubNetwork:
		s := proto1.Size(x.CySubNetwork)
		n += proto1.SizeVarint(15<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_CyTableColumn:
		s := proto1.Size(x.CyTableColumn)
		n += proto1.SizeVarint(16<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NdexStatus:
		s := proto1.Size(x.NdexStatus)
		n += proto1.SizeVarint(17<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Citation:
		s := proto1.Size(x.Citation)
		n += proto1.SizeVarint(18<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NodeCitations:
		s := proto1.Size(x.NodeCitations)
		n += proto1.SizeVarint(19<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_EdgeCitations:
		s := proto1.Size(x.EdgeCitations)
		n += proto1.SizeVarint(20<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_Support:
		s := proto1.Size(x.Support)
		n += proto1.SizeVarint(21<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_NodeSupportance:
		s := proto1.Size(x.NodeSupportance)
		n += proto1.SizeVarint(22<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_EdgeSupportance:
		s := proto1.Size(x.EdgeSupportance)
		n += proto1.SizeVarint(23<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_FunctionTerm:
		s := proto1.Size(x.FunctionTerm)
		n += proto1.SizeVarint(24<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *NetworkElement_ReifiedEdge:
		s := proto1.Size(x.ReifiedEdge)
		n += proto1.SizeVarint(25<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Parameter represents a service parameter.
type Parameter struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Parameter_StringValue
	//	*Parameter_BooleanValue
	//	*Parameter_IntegerValue
	//	*Parameter_NumberValue
	Value isParameter_Value `protobuf_oneof:"value"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto1.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isParameter_Value interface {
	isParameter_Value()
}

type Parameter_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=stringValue,oneof"`
}
type Parameter_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,4,opt,name=booleanValue,oneof"`
}
type Parameter_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,5,opt,name=integerValue,oneof"`
}
type Parameter_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,6,opt,name=numberValue,oneof"`
}

func (*Parameter_StringValue) isParameter_Value()  {}
func (*Parameter_BooleanValue) isParameter_Value() {}
func (*Parameter_IntegerValue) isParameter_Value() {}
func (*Parameter_NumberValue) isParameter_Value()  {}

func (m *Parameter) GetValue() isParameter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Parameter) GetStringValue() string {
	if x, ok := m.GetValue().(*Parameter_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Parameter) GetBooleanValue() bool {
	if x, ok := m.GetValue().(*Parameter_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *Parameter) GetIntegerValue() int64 {
	if x, ok := m.GetValue().(*Parameter_IntegerValue); ok {
		return x.IntegerValue
	}
	return 0
}

func (m *Parameter) GetNumberValue() float64 {
	if x, ok := m.GetValue().(*Parameter_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Parameter) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Parameter_OneofMarshaler, _Parameter_OneofUnmarshaler, _Parameter_OneofSizer, []interface{}{
		(*Parameter_StringValue)(nil),
		(*Parameter_BooleanValue)(nil),
		(*Parameter_IntegerValue)(nil),
		(*Parameter_NumberValue)(nil),
	}
}

func _Parameter_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Parameter)
	// value
	switch x := m.Value.(type) {
	case *Parameter_StringValue:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Parameter_BooleanValue:
		t := uint64(0)
		if x.BooleanValue {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto1.WireVarint)
		b.EncodeVarint(t)
	case *Parameter_IntegerValue:
		b.EncodeVarint(5<<3 | proto1.WireVarint)
		b.EncodeVarint(uint64(x.IntegerValue))
	case *Parameter_NumberValue:
		b.EncodeVarint(6<<3 | proto1.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.NumberValue))
	case nil:
	default:
		return fmt.Errorf("Parameter.Value has unexpected type %T", x)
	}
	return nil
}

func _Parameter_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Parameter)
	switch tag {
	case 3: // value.stringValue
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Parameter_StringValue{x}
		return true, err
	case 4: // value.booleanValue
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Parameter_BooleanValue{x != 0}
		return true, err
	case 5: // value.integerValue
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Parameter_IntegerValue{int64(x)}
		return true, err
	case 6: // value.numberValue
		if wire != proto1.WireFixed64 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Parameter_NumberValue{math.Float64frombits(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Parameter_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Parameter)
	// value
	switch x := m.Value.(type) {
	case *Parameter_StringValue:
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Parameter_BooleanValue:
		n += proto1.SizeVarint(4<<3 | proto1.WireVarint)
		n += 1
	case *Parameter_IntegerValue:
		n += proto1.SizeVarint(5<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.IntegerValue))
	case *Parameter_NumberValue:
		n += proto1.SizeVarint(6<<3 | proto1.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// aspect: node
// Node represents a single node in a network.
type Node struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	Represents string `protobuf:"bytes,3,opt,name=represents,json=r" json:"represents,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto1.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetRepresents() string {
	if m != nil {
		return m.Represents
	}
	return ""
}

// aspect: edge
// Edge represents a single edge in a network.
type Edge struct {
	Id          int64  `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	SourceId    int64  `protobuf:"varint,2,opt,name=sourceId,json=s" json:"sourceId,omitempty"`
	TargetId    int64  `protobuf:"varint,3,opt,name=targetId,json=t" json:"targetId,omitempty"`
	Interaction string `protobuf:"bytes,4,opt,name=interaction,json=i" json:"interaction,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto1.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Edge) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Edge) GetSourceId() int64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *Edge) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *Edge) GetInteraction() string {
	if m != nil {
		return m.Interaction
	}
	return ""
}

// aspect: nodeAttribute
// NodeAttribute represents a single attribute attached to a node.
type NodeAttribute struct {
	NodeId   int64  `protobuf:"varint,1,opt,name=nodeId,json=po" json:"nodeId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,json=v" json:"value,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,json=d" json:"type,omitempty"`
	SubnetId int64  `protobuf:"varint,5,opt,name=subnetId,json=s" json:"subnetId,omitempty"`
}

func (m *NodeAttribute) Reset()                    { *m = NodeAttribute{} }
func (m *NodeAttribute) String() string            { return proto1.CompactTextString(m) }
func (*NodeAttribute) ProtoMessage()               {}
func (*NodeAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeAttribute) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NodeAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NodeAttribute) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: edgeAttribute
// EdgeAttribute represents a single attribute attached to an edge.
type EdgeAttribute struct {
	EdgeId   int64  `protobuf:"varint,1,opt,name=edgeId,json=po" json:"edgeId,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,json=n" json:"name,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,json=v" json:"value,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,json=d" json:"type,omitempty"`
	SubnetId int64  `protobuf:"varint,5,opt,name=subnetId,json=s" json:"subnetId,omitempty"`
}

func (m *EdgeAttribute) Reset()                    { *m = EdgeAttribute{} }
func (m *EdgeAttribute) String() string            { return proto1.CompactTextString(m) }
func (*EdgeAttribute) ProtoMessage()               {}
func (*EdgeAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EdgeAttribute) GetEdgeId() int64 {
	if m != nil {
		return m.EdgeId
	}
	return 0
}

func (m *EdgeAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EdgeAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EdgeAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EdgeAttribute) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: networkAttributes
// NetworkAttribute represents a single attribute attached to a network.
type NetworkAttribute struct {
	Name     string `protobuf:"bytes,1,opt,name=name,json=n" json:"name,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,json=v" json:"value,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,json=d" json:"type,omitempty"`
	SubnetId int64  `protobuf:"varint,4,opt,name=subnetId,json=s" json:"subnetId,omitempty"`
}

func (m *NetworkAttribute) Reset()                    { *m = NetworkAttribute{} }
func (m *NetworkAttribute) String() string            { return proto1.CompactTextString(m) }
func (*NetworkAttribute) ProtoMessage()               {}
func (*NetworkAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NetworkAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NetworkAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *NetworkAttribute) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: cartesianLayout
// CartesianCoordinate represents an (x,y,(z)) coordinate attached to a node.
type CartesianCoordinate struct {
	NodeId int64   `protobuf:"varint,1,opt,name=nodeId,json=node" json:"nodeId,omitempty"`
	X      float64 `protobuf:"fixed64,2,opt,name=x" json:"x,omitempty"`
	Y      float64 `protobuf:"fixed64,3,opt,name=y" json:"y,omitempty"`
	Z      float64 `protobuf:"fixed64,4,opt,name=z" json:"z,omitempty"`
	ViewId int64   `protobuf:"varint,5,opt,name=viewId,json=view" json:"viewId,omitempty"`
}

func (m *CartesianCoordinate) Reset()                    { *m = CartesianCoordinate{} }
func (m *CartesianCoordinate) String() string            { return proto1.CompactTextString(m) }
func (*CartesianCoordinate) ProtoMessage()               {}
func (*CartesianCoordinate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CartesianCoordinate) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CartesianCoordinate) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CartesianCoordinate) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *CartesianCoordinate) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *CartesianCoordinate) GetViewId() int64 {
	if m != nil {
		return m.ViewId
	}
	return 0
}

// aspect: cyGroups
// CyGroup represents a Cytoscape group.
type CyGroup struct {
	Id            int64   `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	View          int64   `protobuf:"varint,2,opt,name=view" json:"view,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Nodes         []int64 `protobuf:"varint,4,rep,packed,name=nodes" json:"nodes,omitempty"`
	ExternalEdges []int64 `protobuf:"varint,5,rep,packed,name=externalEdges,json=external_edge" json:"externalEdges,omitempty"`
	InternalEdges []int64 `protobuf:"varint,6,rep,packed,name=internalEdges,json=internal_edges" json:"internalEdges,omitempty"`
}

func (m *CyGroup) Reset()                    { *m = CyGroup{} }
func (m *CyGroup) String() string            { return proto1.CompactTextString(m) }
func (*CyGroup) ProtoMessage()               {}
func (*CyGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CyGroup) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CyGroup) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *CyGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CyGroup) GetNodes() []int64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CyGroup) GetExternalEdges() []int64 {
	if m != nil {
		return m.ExternalEdges
	}
	return nil
}

func (m *CyGroup) GetInternalEdges() []int64 {
	if m != nil {
		return m.InternalEdges
	}
	return nil
}

// aspect: cyViews
// CyView represents a Cytoscape view.
type CyView struct {
	Id       int64 `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	SubnetId int64 `protobuf:"varint,2,opt,name=subnetId,json=s" json:"subnetId,omitempty"`
}

func (m *CyView) Reset()                    { *m = CyView{} }
func (m *CyView) String() string            { return proto1.CompactTextString(m) }
func (*CyView) ProtoMessage()               {}
func (*CyView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CyView) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CyView) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: cyVisualProperties
// CyVisualProperty represents a Cytoscape visual property.
type CyVisualProperty struct {
	Owner        string            `protobuf:"bytes,1,opt,name=owner,json=properties_of" json:"owner,omitempty"`
	OwnerId      int64             `protobuf:"varint,2,opt,name=ownerId,json=applies_to" json:"ownerId,omitempty"`
	View         int64             `protobuf:"varint,4,opt,name=view" json:"view,omitempty"`
	Properties   map[string]string `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Dependencies map[string]string `protobuf:"bytes,6,rep,name=dependencies" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mappings     map[string][]byte `protobuf:"bytes,7,rep,name=mappings" json:"mappings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CyVisualProperty) Reset()                    { *m = CyVisualProperty{} }
func (m *CyVisualProperty) String() string            { return proto1.CompactTextString(m) }
func (*CyVisualProperty) ProtoMessage()               {}
func (*CyVisualProperty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CyVisualProperty) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CyVisualProperty) GetOwnerId() int64 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

func (m *CyVisualProperty) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *CyVisualProperty) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *CyVisualProperty) GetDependencies() map[string]string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *CyVisualProperty) GetMappings() map[string][]byte {
	if m != nil {
		return m.Mappings
	}
	return nil
}

// aspect: cyHiddenAttributes
// CyHiddenAttribute represents a Cytoscape hidden attribute.
type CyHiddenAttribute struct {
	Name     string `protobuf:"bytes,1,opt,name=name,json=n" json:"name,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,json=v" json:"value,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,json=d" json:"type,omitempty"`
	SubnetId int64  `protobuf:"varint,4,opt,name=subnetId,json=s" json:"subnetId,omitempty"`
}

func (m *CyHiddenAttribute) Reset()                    { *m = CyHiddenAttribute{} }
func (m *CyHiddenAttribute) String() string            { return proto1.CompactTextString(m) }
func (*CyHiddenAttribute) ProtoMessage()               {}
func (*CyHiddenAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CyHiddenAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CyHiddenAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CyHiddenAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CyHiddenAttribute) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: cyNetworkRelations
// CyNetworkRelation represents a relationship between two Cytoscape networks.
type CyNetworkRelation struct {
	ParentId     int64  `protobuf:"varint,1,opt,name=parentId,json=p" json:"parentId,omitempty"`
	ChildId      int64  `protobuf:"varint,2,opt,name=childId,json=c" json:"childId,omitempty"`
	Relationship string `protobuf:"bytes,3,opt,name=relationship,json=r" json:"relationship,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *CyNetworkRelation) Reset()                    { *m = CyNetworkRelation{} }
func (m *CyNetworkRelation) String() string            { return proto1.CompactTextString(m) }
func (*CyNetworkRelation) ProtoMessage()               {}
func (*CyNetworkRelation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CyNetworkRelation) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CyNetworkRelation) GetChildId() int64 {
	if m != nil {
		return m.ChildId
	}
	return 0
}

func (m *CyNetworkRelation) GetRelationship() string {
	if m != nil {
		return m.Relationship
	}
	return ""
}

func (m *CyNetworkRelation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// aspect: cySubNetworks
// CySubNetwork represents a Cytoscape collection subnetwork.
type CySubNetwork struct {
	Id    int64   `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	Edges []int64 `protobuf:"varint,2,rep,packed,name=edges" json:"edges,omitempty"`
	Nodes []int64 `protobuf:"varint,3,rep,packed,name=nodes" json:"nodes,omitempty"`
}

func (m *CySubNetwork) Reset()                    { *m = CySubNetwork{} }
func (m *CySubNetwork) String() string            { return proto1.CompactTextString(m) }
func (*CySubNetwork) ProtoMessage()               {}
func (*CySubNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CySubNetwork) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CySubNetwork) GetEdges() []int64 {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *CySubNetwork) GetNodes() []int64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// aspect: cyTableColumns
// CyTableColumn represents a Cytoscape column.
type CyTableColumn struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Owner    string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	SubnetId int64  `protobuf:"varint,4,opt,name=subnetId,json=applies_to" json:"subnetId,omitempty"`
}

func (m *CyTableColumn) Reset()                    { *m = CyTableColumn{} }
func (m *CyTableColumn) String() string            { return proto1.CompactTextString(m) }
func (*CyTableColumn) ProtoMessage()               {}
func (*CyTableColumn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CyTableColumn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CyTableColumn) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CyTableColumn) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CyTableColumn) GetSubnetId() int64 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

// aspect: ndexStatus
// NdexStatus represents the status of a network on an NDEx server.
type NdexStatus struct {
	Id           string `protobuf:"bytes,1,opt,name=id,json=externalId" json:"id,omitempty"`
	Location     string `protobuf:"bytes,2,opt,name=location,json=ndexServerURI" json:"location,omitempty"`
	Owner        string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	CreationTime string `protobuf:"bytes,4,opt,name=creationTime" json:"creationTime,omitempty"`
	ReadOnly     bool   `protobuf:"varint,5,opt,name=readOnly" json:"readOnly,omitempty"`
	Visibility   string `protobuf:"bytes,6,opt,name=visibility" json:"visibility,omitempty"`
	EdgeCount    int64  `protobuf:"varint,7,opt,name=edgeCount" json:"edgeCount,omitempty"`
	NodeCount    int64  `protobuf:"varint,8,opt,name=nodeCount" json:"nodeCount,omitempty"`
}

func (m *NdexStatus) Reset()                    { *m = NdexStatus{} }
func (m *NdexStatus) String() string            { return proto1.CompactTextString(m) }
func (*NdexStatus) ProtoMessage()               {}
func (*NdexStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *NdexStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NdexStatus) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *NdexStatus) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NdexStatus) GetCreationTime() string {
	if m != nil {
		return m.CreationTime
	}
	return ""
}

func (m *NdexStatus) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *NdexStatus) GetVisibility() string {
	if m != nil {
		return m.Visibility
	}
	return ""
}

func (m *NdexStatus) GetEdgeCount() int64 {
	if m != nil {
		return m.EdgeCount
	}
	return 0
}

func (m *NdexStatus) GetNodeCount() int64 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

// aspect: citations
// Citation specifies a literature reference to a network.
type Citation struct {
	Id          string               `protobuf:"bytes,1,opt,name=id,json=@id" json:"id,omitempty"`
	Title       string               `protobuf:"bytes,2,opt,name=title,json=dc:title" json:"title,omitempty"`
	Description string               `protobuf:"bytes,3,opt,name=description,json=dc:description" json:"description,omitempty"`
	Contributor string               `protobuf:"bytes,4,opt,name=contributor,json=dc:contributor" json:"contributor,omitempty"`
	Identifier  string               `protobuf:"bytes,5,opt,name=identifier,json=dc:identifier" json:"identifier,omitempty"`
	Type        string               `protobuf:"bytes,6,opt,name=type,json=dc:type" json:"type,omitempty"`
	Attributes  []*CitationAttribute `protobuf:"bytes,7,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Citation) Reset()                    { *m = Citation{} }
func (m *Citation) String() string            { return proto1.CompactTextString(m) }
func (*Citation) ProtoMessage()               {}
func (*Citation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Citation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Citation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Citation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Citation) GetContributor() string {
	if m != nil {
		return m.Contributor
	}
	return ""
}

func (m *Citation) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Citation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Citation) GetAttributes() []*CitationAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// CitationAttribute holds an attribute of a citation.
type CitationAttribute struct {
	Name  string `protobuf:"bytes,1,opt,name=name,json=n" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,json=v" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,json=t" json:"type,omitempty"`
}

func (m *CitationAttribute) Reset()                    { *m = CitationAttribute{} }
func (m *CitationAttribute) String() string            { return proto1.CompactTextString(m) }
func (*CitationAttribute) ProtoMessage()               {}
func (*CitationAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CitationAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CitationAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CitationAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// aspect: nodeCitations
// NodeCitations creates a series of nodes to citations mappings.
type NodeCitations struct {
	Nodes     []int64 `protobuf:"varint,1,rep,packed,name=nodes,json=citations" json:"nodes,omitempty"`
	Citations []int64 `protobuf:"varint,2,rep,packed,name=citations,json=po" json:"citations,omitempty"`
}

func (m *NodeCitations) Reset()                    { *m = NodeCitations{} }
func (m *NodeCitations) String() string            { return proto1.CompactTextString(m) }
func (*NodeCitations) ProtoMessage()               {}
func (*NodeCitations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NodeCitations) GetNodes() []int64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NodeCitations) GetCitations() []int64 {
	if m != nil {
		return m.Citations
	}
	return nil
}

// aspect: edgeCitations
// EdgeCitations creates a series of edges to citations mappings.
type EdgeCitations struct {
	Edges     []int64 `protobuf:"varint,1,rep,packed,name=edges,json=citations" json:"edges,omitempty"`
	Citations []int64 `protobuf:"varint,2,rep,packed,name=citations,json=po" json:"citations,omitempty"`
}

func (m *EdgeCitations) Reset()                    { *m = EdgeCitations{} }
func (m *EdgeCitations) String() string            { return proto1.CompactTextString(m) }
func (*EdgeCitations) ProtoMessage()               {}
func (*EdgeCitations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *EdgeCitations) GetEdges() []int64 {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *EdgeCitations) GetCitations() []int64 {
	if m != nil {
		return m.Citations
	}
	return nil
}

// aspect: supports
// Support specifies text that can support one or more nodes or edges in a network.
type Support struct {
	Id         int64               `protobuf:"varint,1,opt,name=id,json=@id" json:"id,omitempty"`
	CitationId int64               `protobuf:"varint,2,opt,name=citationId,json=citation" json:"citationId,omitempty"`
	Text       string              `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Attributes []*SupportAttribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Support) Reset()                    { *m = Support{} }
func (m *Support) String() string            { return proto1.CompactTextString(m) }
func (*Support) ProtoMessage()               {}
func (*Support) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Support) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Support) GetCitationId() int64 {
	if m != nil {
		return m.CitationId
	}
	return 0
}

func (m *Support) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Support) GetAttributes() []*SupportAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// SupportAttribute holds an attribute of a supportant.
type SupportAttribute struct {
	Name  string `protobuf:"bytes,1,opt,name=name,json=n" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,json=v" json:"value,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,json=t" json:"type,omitempty"`
}

func (m *SupportAttribute) Reset()                    { *m = SupportAttribute{} }
func (m *SupportAttribute) String() string            { return proto1.CompactTextString(m) }
func (*SupportAttribute) ProtoMessage()               {}
func (*SupportAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SupportAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SupportAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SupportAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// aspect: nodeSupports
// NodeSupportance provides supportance for a series of nodes.
type NodeSupportance struct {
	Nodes       []int64 `protobuf:"varint,1,rep,packed,name=nodes" json:"nodes,omitempty"`
	Supportance []int64 `protobuf:"varint,2,rep,packed,name=supportance,json=po" json:"supportance,omitempty"`
}

func (m *NodeSupportance) Reset()                    { *m = NodeSupportance{} }
func (m *NodeSupportance) String() string            { return proto1.CompactTextString(m) }
func (*NodeSupportance) ProtoMessage()               {}
func (*NodeSupportance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *NodeSupportance) GetNodes() []int64 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *NodeSupportance) GetSupportance() []int64 {
	if m != nil {
		return m.Supportance
	}
	return nil
}

// aspect: edgeSupports
// EdgeSupportance provides supportance for a series of edges.
type EdgeSupportance struct {
	Edges       []int64 `protobuf:"varint,1,rep,packed,name=edges" json:"edges,omitempty"`
	Supportance []int64 `protobuf:"varint,2,rep,packed,name=supportance,json=po" json:"supportance,omitempty"`
}

func (m *EdgeSupportance) Reset()                    { *m = EdgeSupportance{} }
func (m *EdgeSupportance) String() string            { return proto1.CompactTextString(m) }
func (*EdgeSupportance) ProtoMessage()               {}
func (*EdgeSupportance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EdgeSupportance) GetEdges() []int64 {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *EdgeSupportance) GetSupportance() []int64 {
	if m != nil {
		return m.Supportance
	}
	return nil
}

// aspect: functionTerms
// FuntionTerm link nodes with expressions that define the meaning of the node.
type FunctionTerm struct {
	NodeId    int64    `protobuf:"varint,1,opt,name=nodeId,json=po" json:"nodeId,omitempty"`
	Function  string   `protobuf:"bytes,2,opt,name=function,json=f" json:"function,omitempty"`
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,json=args" json:"arguments,omitempty"`
}

func (m *FunctionTerm) Reset()                    { *m = FunctionTerm{} }
func (m *FunctionTerm) String() string            { return proto1.CompactTextString(m) }
func (*FunctionTerm) ProtoMessage()               {}
func (*FunctionTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *FunctionTerm) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *FunctionTerm) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *FunctionTerm) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

// reifiedEdges: reifiedEdges
// ReifiedEdge logically turns a node into an edge.
type ReifiedEdge struct {
	EdgeId int64 `protobuf:"varint,1,opt,name=edgeId,json=edge" json:"edgeId,omitempty"`
	NodeId int64 `protobuf:"varint,2,opt,name=nodeId,json=node" json:"nodeId,omitempty"`
}

func (m *ReifiedEdge) Reset()                    { *m = ReifiedEdge{} }
func (m *ReifiedEdge) String() string            { return proto1.CompactTextString(m) }
func (*ReifiedEdge) ProtoMessage()               {}
func (*ReifiedEdge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReifiedEdge) GetEdgeId() int64 {
	if m != nil {
		return m.EdgeId
	}
	return 0
}

func (m *ReifiedEdge) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func init() {
	proto1.RegisterType((*NetworkElement)(nil), "proto.NetworkElement")
	proto1.RegisterType((*Parameter)(nil), "proto.Parameter")
	proto1.RegisterType((*Node)(nil), "proto.Node")
	proto1.RegisterType((*Edge)(nil), "proto.Edge")
	proto1.RegisterType((*NodeAttribute)(nil), "proto.NodeAttribute")
	proto1.RegisterType((*EdgeAttribute)(nil), "proto.EdgeAttribute")
	proto1.RegisterType((*NetworkAttribute)(nil), "proto.NetworkAttribute")
	proto1.RegisterType((*CartesianCoordinate)(nil), "proto.CartesianCoordinate")
	proto1.RegisterType((*CyGroup)(nil), "proto.CyGroup")
	proto1.RegisterType((*CyView)(nil), "proto.CyView")
	proto1.RegisterType((*CyVisualProperty)(nil), "proto.CyVisualProperty")
	proto1.RegisterType((*CyHiddenAttribute)(nil), "proto.CyHiddenAttribute")
	proto1.RegisterType((*CyNetworkRelation)(nil), "proto.CyNetworkRelation")
	proto1.RegisterType((*CySubNetwork)(nil), "proto.CySubNetwork")
	proto1.RegisterType((*CyTableColumn)(nil), "proto.CyTableColumn")
	proto1.RegisterType((*NdexStatus)(nil), "proto.NdexStatus")
	proto1.RegisterType((*Citation)(nil), "proto.Citation")
	proto1.RegisterType((*CitationAttribute)(nil), "proto.CitationAttribute")
	proto1.RegisterType((*NodeCitations)(nil), "proto.NodeCitations")
	proto1.RegisterType((*EdgeCitations)(nil), "proto.EdgeCitations")
	proto1.RegisterType((*Support)(nil), "proto.Support")
	proto1.RegisterType((*SupportAttribute)(nil), "proto.SupportAttribute")
	proto1.RegisterType((*NodeSupportance)(nil), "proto.NodeSupportance")
	proto1.RegisterType((*EdgeSupportance)(nil), "proto.EdgeSupportance")
	proto1.RegisterType((*FunctionTerm)(nil), "proto.FunctionTerm")
	proto1.RegisterType((*ReifiedEdge)(nil), "proto.ReifiedEdge")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CxMateService service

type CxMateServiceClient interface {
	// StreamNetworks transfers one or more networks to and from the service.
	StreamNetworks(ctx context.Context, opts ...grpc.CallOption) (CxMateService_StreamNetworksClient, error)
}

type cxMateServiceClient struct {
	cc *grpc.ClientConn
}

func NewCxMateServiceClient(cc *grpc.ClientConn) CxMateServiceClient {
	return &cxMateServiceClient{cc}
}

func (c *cxMateServiceClient) StreamNetworks(ctx context.Context, opts ...grpc.CallOption) (CxMateService_StreamNetworksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CxMateService_serviceDesc.Streams[0], c.cc, "/proto.cxMateService/StreamNetworks", opts...)
	if err != nil {
		return nil, err
	}
	x := &cxMateServiceStreamNetworksClient{stream}
	return x, nil
}

type CxMateService_StreamNetworksClient interface {
	Send(*NetworkElement) error
	Recv() (*NetworkElement, error)
	grpc.ClientStream
}

type cxMateServiceStreamNetworksClient struct {
	grpc.ClientStream
}

func (x *cxMateServiceStreamNetworksClient) Send(m *NetworkElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cxMateServiceStreamNetworksClient) Recv() (*NetworkElement, error) {
	m := new(NetworkElement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CxMateService service

type CxMateServiceServer interface {
	// StreamNetworks transfers one or more networks to and from the service.
	StreamNetworks(CxMateService_StreamNetworksServer) error
}

func RegisterCxMateServiceServer(s *grpc.Server, srv CxMateServiceServer) {
	s.RegisterService(&_CxMateService_serviceDesc, srv)
}

func _CxMateService_StreamNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CxMateServiceServer).StreamNetworks(&cxMateServiceStreamNetworksServer{stream})
}

type CxMateService_StreamNetworksServer interface {
	Send(*NetworkElement) error
	Recv() (*NetworkElement, error)
	grpc.ServerStream
}

type cxMateServiceStreamNetworksServer struct {
	grpc.ServerStream
}

func (x *cxMateServiceStreamNetworksServer) Send(m *NetworkElement) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cxMateServiceStreamNetworksServer) Recv() (*NetworkElement, error) {
	m := new(NetworkElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CxMateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.cxMateService",
	HandlerType: (*CxMateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNetworks",
			Handler:       _CxMateService_StreamNetworks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cxmate.proto",
}

func init() { proto1.RegisterFile("cxmate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x6f, 0xdb, 0xca,
	0x11, 0x16, 0x75, 0xb1, 0xa4, 0x91, 0x64, 0xc9, 0xeb, 0x1b, 0xeb, 0x1a, 0x6d, 0xc2, 0x26, 0x88,
	0x5b, 0xa0, 0x46, 0xe0, 0x00, 0x6d, 0xe2, 0xb6, 0xc8, 0xc5, 0x71, 0x22, 0xa3, 0x48, 0x6a, 0xac,
	0x93, 0x00, 0x45, 0x0b, 0x04, 0x14, 0xb9, 0x56, 0x58, 0x53, 0x4b, 0x62, 0xb9, 0xb2, 0xad, 0x3c,
	0x16, 0xe8, 0x4f, 0xe9, 0x3f, 0xea, 0x2f, 0xe9, 0x4b, 0xd1, 0xb7, 0x62, 0x76, 0x79, 0x59, 0x52,
	0x32, 0x7a, 0x4e, 0x70, 0xce, 0x93, 0xb9, 0x33, 0xdf, 0x7c, 0xbb, 0x33, 0x3b, 0x33, 0x3b, 0x16,
	0xf4, 0xbd, 0xdb, 0x99, 0x2b, 0xd9, 0x61, 0x2c, 0x22, 0x19, 0x91, 0x96, 0xfa, 0xe3, 0xfc, 0xbd,
	0x07, 0xeb, 0xef, 0x99, 0xbc, 0x89, 0xc4, 0xd5, 0x69, 0xc8, 0x66, 0x8c, 0x4b, 0xb2, 0x05, 0xad,
	0xd0, 0x9d, 0xb0, 0xd0, 0xb6, 0xee, 0x59, 0x07, 0x5d, 0xaa, 0x17, 0xe4, 0x31, 0x74, 0x63, 0x57,
	0xb8, 0x33, 0x26, 0x99, 0xb0, 0xeb, 0xf7, 0xac, 0x83, 0xde, 0xd1, 0x48, 0x53, 0x1d, 0x9e, 0x67,
	0xf2, 0x71, 0x8d, 0x16, 0x20, 0xb2, 0x05, 0xcd, 0xbf, 0x25, 0x11, 0xb7, 0x1b, 0x48, 0x33, 0xae,
	0x51, 0xb5, 0x22, 0xf7, 0xa1, 0xc9, 0x23, 0x9f, 0xd9, 0x4d, 0x45, 0xd1, 0x4b, 0x29, 0xde, 0x47,
	0x3e, 0x43, 0x08, 0xaa, 0x10, 0xc2, 0xfc, 0x29, 0xb3, 0x5b, 0x25, 0xc8, 0xa9, 0x3f, 0x55, 0x10,
	0x54, 0x91, 0xdf, 0xc3, 0x00, 0xa1, 0x2f, 0xa5, 0x14, 0xc1, 0x64, 0x2e, 0x99, 0xbd, 0xa6, 0xb0,
	0x5b, 0x06, 0x5d, 0xae, 0x1b, 0xd7, 0x68, 0x19, 0x8c, 0xd6, 0xc8, 0x52, 0x58, 0xb7, 0x4b, 0xd6,
	0xa7, 0xa6, 0x0e, 0xad, 0x4b, 0x60, 0x72, 0x0a, 0x23, 0xae, 0x23, 0x56, 0x10, 0x74, 0x14, 0xc1,
	0x6e, 0xb6, 0x7d, 0x45, 0x3d, 0xae, 0xd1, 0x25, 0x13, 0xf2, 0x1e, 0x36, 0x4f, 0x5c, 0x21, 0x59,
	0x12, 0xb8, 0xfc, 0x24, 0x8a, 0x84, 0x1f, 0x70, 0x57, 0x32, 0xbb, 0xab, 0x98, 0xf6, 0x52, 0xa6,
	0x15, 0x88, 0x71, 0x8d, 0xae, 0x32, 0x24, 0xbf, 0x82, 0xb6, 0xb7, 0x78, 0x2b, 0xa2, 0x79, 0x6c,
	0x83, 0xe2, 0x58, 0xcf, 0x38, 0xb4, 0x74, 0x5c, 0xa3, 0x19, 0x80, 0x3c, 0x82, 0x35, 0x6f, 0xf1,
	0x29, 0x60, 0x37, 0x76, 0x4f, 0x41, 0x07, 0x39, 0x14, 0x85, 0xe3, 0x1a, 0x4d, 0xd5, 0xe8, 0x2b,
	0x7e, 0x25, 0x73, 0x37, 0x3c, 0x17, 0x51, 0xcc, 0x84, 0x5c, 0xd8, 0xfd, 0x92, 0xaf, 0x27, 0x15,
	0x35, 0xfa, 0x5a, 0x35, 0x21, 0x63, 0xd8, 0xf0, 0x16, 0xe3, 0xc0, 0xf7, 0x19, 0x2f, 0x62, 0x36,
	0x50, 0x3c, 0x76, 0xce, 0x53, 0xd1, 0x8f, 0x6b, 0x74, 0xd9, 0x48, 0x33, 0xa5, 0xf1, 0xa5, 0x2c,
	0x74, 0x65, 0x10, 0x71, 0x7b, 0xbd, 0xc2, 0x54, 0xd1, 0x6b, 0xa6, 0x8a, 0x90, 0x3c, 0x83, 0xbe,
	0xb7, 0xb8, 0x98, 0x4f, 0x52, 0xb9, 0x3d, 0x54, 0x24, 0x9b, 0x39, 0x49, 0xa1, 0x1a, 0xd7, 0x68,
	0x09, 0x8a, 0xf9, 0xe3, 0x2d, 0x3e, 0xb8, 0x93, 0x90, 0x9d, 0x44, 0xe1, 0x7c, 0xc6, 0xed, 0x51,
	0x29, 0x7f, 0x4e, 0x4c, 0x1d, 0xe6, 0x4f, 0x09, 0x4c, 0x9e, 0x00, 0x70, 0x9f, 0xdd, 0x5e, 0x48,
	0x57, 0xce, 0x13, 0x7b, 0x43, 0x99, 0x6e, 0x64, 0x99, 0x93, 0x2b, 0xc6, 0x35, 0x6a, 0xc0, 0xc8,
	0xaf, 0xa1, 0xe3, 0x05, 0x52, 0xbb, 0x4b, 0x94, 0xc9, 0x30, 0xdb, 0x2d, 0x15, 0x8f, 0x6b, 0x34,
	0x87, 0x64, 0xf5, 0x91, 0xe9, 0x12, 0x7b, 0x73, 0xa9, 0x3e, 0x72, 0x5d, 0x56, 0x1f, 0xb9, 0x20,
	0xab, 0x8f, 0xc2, 0x7a, 0x6b, 0xa9, 0x3e, 0x4a, 0xd6, 0x25, 0x30, 0x26, 0x62, 0x32, 0x8f, 0xe3,
	0x48, 0x48, 0x7b, 0xbb, 0x94, 0x88, 0x17, 0x5a, 0x8a, 0x89, 0x98, 0x02, 0xc8, 0x2b, 0x18, 0xe2,
	0xd6, 0xa9, 0xc6, 0xe5, 0x1e, 0xb3, 0x77, 0x94, 0xcd, 0x8e, 0x71, 0x52, 0x43, 0x3b, 0xae, 0xd1,
	0xaa, 0x01, 0x72, 0xe0, 0x01, 0x4c, 0x8e, 0xdd, 0x12, 0xc7, 0x69, 0x59, 0x8b, 0x1c, 0x15, 0x03,
	0x4c, 0x86, 0xcb, 0x39, 0xf7, 0xd0, 0x81, 0x0f, 0x4c, 0xcc, 0x6c, 0xbb, 0x94, 0x0c, 0x6f, 0x0c,
	0x15, 0x26, 0x83, 0x09, 0x25, 0xbf, 0x81, 0x9e, 0x60, 0xc1, 0x65, 0xc0, 0x7c, 0xdc, 0xc7, 0xfe,
	0x89, 0xb2, 0x24, 0xa9, 0x25, 0x2d, 0x34, 0xe3, 0x1a, 0x35, 0x81, 0xaf, 0xba, 0xd0, 0x66, 0xba,
	0xe3, 0x3a, 0xff, 0xb2, 0xa0, 0x9b, 0x37, 0x51, 0x42, 0xa0, 0xc9, 0xdd, 0x19, 0x4b, 0xdb, 0xaf,
	0xfa, 0x26, 0x3b, 0xb0, 0x76, 0x19, 0x89, 0x99, 0x2b, 0x55, 0xeb, 0xed, 0xd2, 0x74, 0x45, 0x1c,
	0xe8, 0x25, 0x52, 0x04, 0x7c, 0xfa, 0xc9, 0x0d, 0xe7, 0x2c, 0x6f, 0xb5, 0xa6, 0x90, 0x3c, 0x80,
	0xfe, 0x24, 0x8a, 0x42, 0xe6, 0x72, 0x0d, 0xc2, 0xce, 0xdb, 0x41, 0x37, 0x4c, 0x29, 0xa2, 0x02,
	0x2e, 0xd9, 0x94, 0x09, 0x8d, 0xc2, 0xe6, 0xdb, 0x40, 0x94, 0x29, 0xc5, 0xfd, 0xf8, 0x7c, 0x36,
	0xc9, 0x40, 0xd8, 0x75, 0x2d, 0xdc, 0xcf, 0x10, 0xbe, 0x6a, 0x43, 0xeb, 0x1a, 0x3f, 0x9c, 0xe7,
	0xd0, 0xc4, 0xeb, 0x23, 0x43, 0xa8, 0x07, 0xbe, 0x72, 0xa7, 0x41, 0x1b, 0x2f, 0x02, 0x9f, 0x0c,
	0x53, 0x0f, 0xb5, 0x2f, 0x16, 0x27, 0xdb, 0x00, 0x82, 0xc5, 0x82, 0x25, 0x8c, 0xcb, 0x44, 0x7b,
	0x41, 0x2d, 0xe1, 0xfc, 0x19, 0x9a, 0x18, 0xaa, 0x65, 0x82, 0x4d, 0xe8, 0x24, 0xd1, 0x5c, 0x78,
	0xec, 0xcc, 0x57, 0x24, 0x0d, 0x6a, 0x25, 0x28, 0x94, 0xae, 0x98, 0x32, 0x79, 0xe6, 0x2b, 0x8a,
	0x06, 0xb5, 0x24, 0xd9, 0x81, 0x1e, 0x3a, 0x20, 0x5c, 0x75, 0x61, 0xca, 0xf7, 0x2e, 0xb5, 0x02,
	0x27, 0x84, 0x41, 0xe9, 0x91, 0x20, 0x04, 0xd6, 0x30, 0xb1, 0xce, 0xb2, 0x7d, 0xea, 0x71, 0xb4,
	0x7c, 0xce, 0x51, 0xea, 0x5a, 0x76, 0xc4, 0x6b, 0x84, 0xc8, 0x45, 0xcc, 0x32, 0x62, 0x7d, 0xb4,
	0xf9, 0x84, 0xab, 0x53, 0xb4, 0xd2, 0xa3, 0xe1, 0x6e, 0xa5, 0x47, 0x05, 0x77, 0xc3, 0x14, 0xfc,
	0x71, 0x76, 0xfb, 0x0b, 0x8c, 0xaa, 0x2f, 0x50, 0x4e, 0x6e, 0x2d, 0x91, 0xd7, 0xab, 0xe4, 0x8d,
	0x55, 0xe4, 0xcd, 0x8c, 0xfc, 0x6a, 0xe5, 0xb3, 0x45, 0xb6, 0x2a, 0xe1, 0xd3, 0x2f, 0x79, 0x1f,
	0xac, 0x5b, 0xb5, 0x81, 0x45, 0xad, 0x5b, 0x5c, 0x2d, 0x14, 0xbb, 0x45, 0xad, 0x05, 0xae, 0xbe,
	0x2a, 0x5a, 0x8b, 0x5a, 0x5f, 0xd1, 0xfe, 0x3a, 0x60, 0x37, 0xb9, 0x1b, 0x4d, 0x5c, 0x39, 0xff,
	0xb4, 0xa0, 0x9d, 0x3e, 0x5f, 0xcb, 0x49, 0x40, 0x40, 0x81, 0xd2, 0x04, 0x50, 0xdf, 0x79, 0xed,
	0x34, 0x8c, 0xda, 0xd9, 0x82, 0x16, 0x1e, 0x26, 0xb1, 0x9b, 0xf7, 0x1a, 0x07, 0x0d, 0xaa, 0x17,
	0xe4, 0x01, 0x0c, 0xd8, 0xad, 0x64, 0x82, 0xbb, 0x21, 0x5e, 0x4d, 0x62, 0xb7, 0x94, 0x36, 0x17,
	0x7e, 0x56, 0x73, 0xc6, 0x43, 0x18, 0xa8, 0xf4, 0xc9, 0x51, 0x6b, 0x0a, 0xb5, 0x9e, 0x09, 0x15,
	0x2a, 0x71, 0x0e, 0x61, 0x4d, 0x3f, 0x9d, 0xab, 0x53, 0x35, 0x0b, 0x62, 0x96, 0xaa, 0xce, 0x7f,
	0x1b, 0x30, 0xaa, 0x3e, 0x9c, 0x64, 0x1f, 0x5a, 0xd1, 0x0d, 0x67, 0x22, 0xbd, 0xa3, 0x41, 0xac,
	0x15, 0x01, 0x4b, 0x3e, 0x47, 0x97, 0xe4, 0xa7, 0xd0, 0x56, 0xda, 0x9c, 0x06, 0xdc, 0x38, 0x0e,
	0x51, 0x29, 0xa3, 0x3c, 0x14, 0x4d, 0x23, 0x14, 0x6f, 0x01, 0x0a, 0x06, 0xe5, 0x5d, 0xef, 0xe8,
	0xd1, 0x1d, 0x8f, 0xf6, 0xe1, 0x79, 0x8e, 0x3c, 0xe5, 0x52, 0x2c, 0xa8, 0x61, 0x4a, 0xde, 0x41,
	0xdf, 0x67, 0x31, 0xe3, 0x3e, 0xe3, 0x5e, 0x90, 0x86, 0xa0, 0x77, 0xf4, 0xcb, 0xbb, 0xa8, 0x5e,
	0x1b, 0x58, 0x4d, 0x56, 0x32, 0x27, 0x2f, 0xa1, 0x33, 0x73, 0xe3, 0x38, 0xe0, 0xd3, 0xc4, 0x6e,
	0x2b, 0xaa, 0x87, 0x77, 0x51, 0xbd, 0x4b, 0x71, 0x9a, 0x26, 0x37, 0xdb, 0xfb, 0x03, 0x0c, 0x2b,
	0x07, 0x26, 0x23, 0x68, 0x5c, 0xb1, 0x45, 0x1a, 0x3a, 0xfc, 0xc4, 0x6b, 0x37, 0x13, 0x5c, 0x2f,
	0x8e, 0xeb, 0x4f, 0xad, 0xbd, 0xe7, 0xb0, 0xb1, 0x74, 0xc8, 0xef, 0x45, 0xf0, 0x3b, 0x18, 0x94,
	0x8e, 0xf6, 0xff, 0x8c, 0xfb, 0x86, 0xb1, 0xf3, 0x57, 0xd8, 0x58, 0x9a, 0x75, 0x7e, 0xb8, 0xf2,
	0x0c, 0x90, 0xbd, 0x3a, 0xea, 0x6c, 0x42, 0x27, 0x76, 0x05, 0xe3, 0x32, 0x2f, 0x4f, 0x2b, 0x26,
	0x04, 0xda, 0xde, 0x97, 0x20, 0xf4, 0x8b, 0xbc, 0xf4, 0xc8, 0x2e, 0xf4, 0x45, 0x6a, 0x94, 0x7c,
	0x09, 0xe2, 0xbc, 0x13, 0xe7, 0x75, 0xd5, 0x2c, 0xea, 0xca, 0xf9, 0x23, 0xf4, 0xcd, 0x29, 0x69,
	0x39, 0xf5, 0xb7, 0xa0, 0xa5, 0xca, 0xc3, 0xae, 0xeb, 0xc2, 0x53, 0x8b, 0xa2, 0x1c, 0x1b, 0x46,
	0x39, 0x3a, 0x57, 0x30, 0x28, 0x8d, 0x4d, 0x2b, 0x5f, 0x41, 0x92, 0x86, 0x40, 0xc7, 0x44, 0x7d,
	0x23, 0x9d, 0xae, 0x1a, 0x7d, 0x56, 0xbd, 0x20, 0xfb, 0x4b, 0xb1, 0x31, 0xca, 0xc5, 0xf9, 0x8f,
	0x05, 0x50, 0x4c, 0x5a, 0x64, 0x27, 0x3f, 0x78, 0x97, 0x42, 0x56, 0xff, 0x67, 0x3e, 0xf9, 0x39,
	0x74, 0xc2, 0xc8, 0xd3, 0x33, 0x97, 0xde, 0x72, 0xa0, 0x26, 0x32, 0x26, 0xae, 0x99, 0xf8, 0x48,
	0xcf, 0xee, 0xd8, 0xdb, 0x81, 0xbe, 0x27, 0x98, 0x32, 0xfb, 0x10, 0xe4, 0x31, 0x2b, 0xc9, 0xc8,
	0x1e, 0x74, 0x04, 0x73, 0xfd, 0x3f, 0xf1, 0x70, 0xa1, 0x1a, 0x5e, 0x87, 0xe6, 0x6b, 0xf2, 0x33,
	0x80, 0xeb, 0x20, 0x09, 0x26, 0x41, 0x18, 0xc8, 0x85, 0x7a, 0x62, 0xbb, 0xd4, 0x90, 0x90, 0x7d,
	0xe8, 0xaa, 0x81, 0x2b, 0x9a, 0x73, 0xa9, 0xfe, 0x73, 0x69, 0xd0, 0x42, 0x80, 0x5a, 0x35, 0xcc,
	0x29, 0x6d, 0x47, 0x6b, 0x73, 0x81, 0xf3, 0x6f, 0x0b, 0x3a, 0xd9, 0xa4, 0x66, 0x5c, 0x58, 0x57,
	0x5f, 0xd8, 0x2e, 0xb4, 0x64, 0x20, 0xc3, 0x2c, 0xc0, 0x1d, 0xdf, 0x3b, 0x56, 0x6b, 0xf2, 0x0b,
	0xe8, 0xf9, 0x2c, 0xf1, 0x44, 0x10, 0xab, 0x60, 0x68, 0x77, 0xd7, 0x7d, 0xef, 0xd8, 0x90, 0x22,
	0xc8, 0x8b, 0xb8, 0xce, 0xe8, 0x48, 0xa4, 0x6e, 0x23, 0xc8, 0x90, 0x92, 0xfb, 0x00, 0x81, 0xcf,
	0xb8, 0xc4, 0x39, 0x48, 0x28, 0xd7, 0xbb, 0x74, 0xe0, 0x7b, 0xc7, 0x85, 0x90, 0x6c, 0xa7, 0xb7,
	0xac, 0x3d, 0x6f, 0xe3, 0x21, 0xf0, 0xa2, 0x9f, 0x02, 0xb8, 0x59, 0xbd, 0x64, 0x9d, 0xc3, 0xae,
	0xcc, 0xc0, 0x79, 0x41, 0x51, 0x03, 0xeb, 0xbc, 0x85, 0x8d, 0x25, 0xc0, 0x37, 0x54, 0x9c, 0x74,
	0x5e, 0xe8, 0xa1, 0xa1, 0x18, 0x75, 0xed, 0x2c, 0x97, 0x2d, 0x95, 0xcb, 0x5d, 0x2f, 0xd7, 0x6c,
	0x43, 0xb1, 0x48, 0xf3, 0xbf, 0x1e, 0x47, 0xc8, 0x50, 0x9a, 0x9e, 0x91, 0x41, 0xd7, 0xc8, 0x77,
	0x65, 0xf8, 0x87, 0x05, 0xed, 0x74, 0x72, 0x5d, 0xae, 0xb8, 0x7d, 0x80, 0xcc, 0x26, 0x2f, 0xeb,
	0xe2, 0x9f, 0x02, 0x2c, 0x1f, 0x76, 0x2b, 0xb3, 0xc7, 0x11, 0xbf, 0xc9, 0x6f, 0x4b, 0x51, 0x6d,
	0xaa, 0xa8, 0xee, 0x96, 0xe7, 0xf5, 0xd5, 0x41, 0x7d, 0x03, 0xa3, 0xaa, 0xfe, 0x1b, 0x63, 0x3a,
	0xac, 0xcc, 0xf8, 0x45, 0x87, 0xb0, 0xcc, 0x07, 0x7b, 0x17, 0x7a, 0x89, 0x31, 0xe2, 0x9b, 0x31,
	0x1d, 0x56, 0x26, 0xfc, 0xa2, 0xf3, 0x58, 0x66, 0xe7, 0xb9, 0x93, 0xe1, 0x1c, 0xfa, 0xe6, 0x88,
	0xbf, 0x72, 0x16, 0xdc, 0x84, 0x4e, 0x36, 0xf6, 0x67, 0xde, 0x5c, 0x92, 0x5d, 0xe8, 0xba, 0x62,
	0x3a, 0x9f, 0xa5, 0x63, 0x6b, 0x03, 0xc3, 0xea, 0x8a, 0x69, 0xe2, 0x3c, 0x83, 0x9e, 0x31, 0xfa,
	0xe3, 0x74, 0x53, 0x1a, 0xf7, 0xf4, 0x8f, 0x18, 0xc5, 0xcc, 0x54, 0x2f, 0x66, 0xa6, 0xa3, 0x8f,
	0x30, 0xf0, 0x6e, 0xdf, 0xb9, 0x92, 0x61, 0x9f, 0x09, 0x3c, 0x46, 0x5e, 0xc3, 0xfa, 0x85, 0x14,
	0xcc, 0x9d, 0xa5, 0x8d, 0x36, 0x21, 0xdb, 0xe5, 0xdf, 0x19, 0xd2, 0x1f, 0x6e, 0xf6, 0x56, 0x8b,
	0x9d, 0xda, 0x81, 0xf5, 0xd8, 0x9a, 0xac, 0x29, 0xdd, 0x93, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x32, 0x89, 0xf8, 0x5f, 0x06, 0x12, 0x00, 0x00,
}
